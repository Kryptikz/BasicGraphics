#version 410 core

out vec4 FragColor;
in vec4 ourColor;
in vec3 normVec;
in vec3 fragPos;
in vec3 objectColor;
in float wavePos;

in vec3 lightDir;
in float diff;

in float gHeight;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 viewPos;
uniform float noiseMap[10];

float specStrength = 0.8f;
vec3 ambient = vec3(0.4f,0.4f,0.4f);

float random(float seed) {
	float seedMod = sin(seed*100000.0f);
	return seedMod-floor(seedMod);
}

void main() {
	vec3 norm = normVec;
	//float randX = sin(gl_FragCoord.x/mod(0.25*ourColor.w, 2.0f));	
	//randX = clamp(randX, 0.0f, 0.8f) + 0.2f;
	//float randY = sin(gl_FragCoord.y/mod(0.25*ourColor.w, 1.5f));
	//randY = clamp(randY, 0.0f, 1.0f) + 0.2f;
	float alpha = 0.9f;

	if (lightDir.y > 0.0f) {
		vec3 diffuse = diff * lightColor;
		vec3 viewDir = normalize(viewPos - fragPos);
		vec3 reflectDir = reflect(-lightDir,norm);
		float spec = pow(max(dot(viewDir,reflectDir),0.0f),512);
		vec3 specular = specStrength * spec * lightColor;
		vec3 result = (ambient + diffuse + specular) * objectColor;		
		FragColor = vec4(result, alpha);
		//FragColor = vec4(reflectDir, alpha);
	} else {
		vec3 result = (ambient) * objectColor;
		FragColor = vec4(result, alpha);	
	}
	
}

