#version 410 core

out vec4 FragColor;
in vec4 ourColor;
in vec3 normVec;
in vec3 fragPos;
in vec3 objectColor;

in vec3 lightDir;
in float diff;

in vec4 fragPosLightSpace;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 viewPos;

uniform sampler2D shadowMap;

float specStrength = 0.4f;
vec3 ambient = vec3(0.4f,0.4f,0.4f);

float random(float seed) {
	float seedMod = sin(seed*10000.0f);
	return seedMod-floor(seedMod);
}

float distance(vec3 pos1, vec3 pos2) {
	float v1 = pos1.x*pos2.x;
	float v2 = pos1.y*pos2.y;
	float v3 = pos1.z*pos2.z;
	return sqrt(v1+v2+v3);
}

float LinearizeDepth(float depth)
{
	float near_plane = 0.1f;
	float far_plane = 10000.0f;

    float z = depth * 2.0 - 1.0; // Back to NDC 
    return (2.0 * near_plane * far_plane) / (far_plane + near_plane - z * (far_plane - near_plane));	
}

float ShadowCalculation(vec4 fragPosLightSpace) {
	float bias = 0.005f;
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5; 
	float closestDepth = texture(shadowMap, projCoords.xy).r;
	//closestDepth = LinearizeDepth(closestDepth);
	float currentDepth = projCoords.z;  
	float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
	return shadow;
	//return currentDepth/10.0f;
}

void main() {
	vec3 norm = normVec;
	float randSeed1 = fragPos.x*fragPos.y;
	float randSeed2 = fragPos.y*fragPos.z;
	float randSeed3 = fragPos.z*fragPos.y;
	float nMod1 = 0.1f*random(randSeed1);
	float nMod2 = 0.1f*random(randSeed2);
	float nMod3 = 0.1f*random(randSeed3);
	vec3 norm2 = vec3(norm.x+nMod1,norm.y+nMod2,norm.z+nMod3);
	
	//vec3 lightDir2 = normalize(lightPos - fragPos);	
	if (1 == 1) {
		float diff2 = max(-1.0f*(dot(norm2, lightDir)),0.0f);
		vec3 diffuse = diff2 * lightColor;
		vec3 viewDir = normalize(viewPos - fragPos);
		vec3 reflectDir = reflect(-lightDir,norm);
		float spec = pow(max(dot(viewDir,reflectDir),0.0f),4.0f);
		vec3 specular = specStrength * spec * lightColor;
		float shadow = ShadowCalculation(fragPosLightSpace);     
		//vec3 result = (ambient + diffuse + specular) * objectColor;		
		vec3 result = (ambient + (1.0f - shadow) * (diffuse + specular)) * objectColor;
		//vec3 result = vec3(fragPosLightSpace.xyz);
		//vec3 result = vec3(shadow,shadow,shadow);
		FragColor = vec4(result, 1.0f);
	} else {
		vec3 result = (ambient) * objectColor;
		FragColor = vec4(result, 1.0f);	
	}
}

